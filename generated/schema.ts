// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Order extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("maker", Value.fromBytes(Bytes.empty()));
    this.set("makeAssetClass", Value.fromBytes(Bytes.empty()));
    this.set("makeData", Value.fromBytes(Bytes.empty()));
    this.set("takeAssetClass", Value.fromBytes(Bytes.empty()));
    this.set("takeData", Value.fromBytes(Bytes.empty()));
    this.set("status", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Order entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Order entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Order", id.toString(), this);
    }
  }

  static load(id: string): Order | null {
    return changetype<Order | null>(store.get("Order", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get maker(): Bytes {
    let value = this.get("maker");
    return value!.toBytes();
  }

  set maker(value: Bytes) {
    this.set("maker", Value.fromBytes(value));
  }

  get makeAssetClass(): Bytes {
    let value = this.get("makeAssetClass");
    return value!.toBytes();
  }

  set makeAssetClass(value: Bytes) {
    this.set("makeAssetClass", Value.fromBytes(value));
  }

  get makeData(): Bytes {
    let value = this.get("makeData");
    return value!.toBytes();
  }

  set makeData(value: Bytes) {
    this.set("makeData", Value.fromBytes(value));
  }

  get taker(): Bytes | null {
    let value = this.get("taker");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set taker(value: Bytes | null) {
    if (!value) {
      this.unset("taker");
    } else {
      this.set("taker", Value.fromBytes(<Bytes>value));
    }
  }

  get takeAssetClass(): Bytes {
    let value = this.get("takeAssetClass");
    return value!.toBytes();
  }

  set takeAssetClass(value: Bytes) {
    this.set("takeAssetClass", Value.fromBytes(value));
  }

  get takeData(): Bytes {
    let value = this.get("takeData");
    return value!.toBytes();
  }

  set takeData(value: Bytes) {
    this.set("takeData", Value.fromBytes(value));
  }

  get fill(): BigInt | null {
    let value = this.get("fill");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fill(value: BigInt | null) {
    if (!value) {
      this.unset("fill");
    } else {
      this.set("fill", Value.fromBigInt(<BigInt>value));
    }
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }
}
